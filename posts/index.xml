<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Markov Logic Networks in Python: PracMLN</title>
    <link>https://kaivalyar.github.io/gsoc18-pracmln/posts/</link>
    <description>Recent content in Posts on Markov Logic Networks in Python: PracMLN</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 18 Jul 2018 04:10:07 +0530</lastBuildDate>
    
	<atom:link href="https://kaivalyar.github.io/gsoc18-pracmln/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The First Optimisations</title>
      <link>https://kaivalyar.github.io/gsoc18-pracmln/posts/the-first-optimisations/</link>
      <pubDate>Wed, 18 Jul 2018 04:10:07 +0530</pubDate>
      
      <guid>https://kaivalyar.github.io/gsoc18-pracmln/posts/the-first-optimisations/</guid>
      <description>After analysing the profiles, I started optimising slow portions of PracMLN. The changes described here have led to significant speedups, bringing runtimes for a reference MLN Exact Inference task down by a further 10%-15%.
Profiling vs Cythonising There was a fundamental distinction between the information obtained via a the profiles generated, and that required by Cython, for speeding up PracMLN. The profiler pointed me to slow portions in the code, to bottlenecks.</description>
    </item>
    
    <item>
      <title>Profiling</title>
      <link>https://kaivalyar.github.io/gsoc18-pracmln/posts/profiling/</link>
      <pubDate>Tue, 10 Jul 2018 03:25:59 +0530</pubDate>
      
      <guid>https://kaivalyar.github.io/gsoc18-pracmln/posts/profiling/</guid>
      <description>This entire post is dedicated to a description of the various profilers I experimented with. At the start of this project, I didn&amp;rsquo;t know what profiling was, however, over the last week, I have tried multiple ones. This post expounds my experiences, summarising the relative strengths and weaknesses of each, and describing what I think works best for the PracMLN project in particular.
Built-In Profiling The first thing to note when profiling is that PracMLN has built-in profiling capabilities.</description>
    </item>
    
    <item>
      <title>A Review</title>
      <link>https://kaivalyar.github.io/gsoc18-pracmln/posts/a-review/</link>
      <pubDate>Fri, 06 Jul 2018 04:38:35 +0530</pubDate>
      
      <guid>https://kaivalyar.github.io/gsoc18-pracmln/posts/a-review/</guid>
      <description>A review is most appropriate at the end of a project, to reflect on things well-done, and not-so-well-done. However, I thought to take pause in the middle of my project to reflect on some of my learnings and shortcomings over the last 2 months.
Project Status As of now, using the latest test scripts from my PracTests repository, there seems to be around a 20% speed increase in PracMLN.</description>
    </item>
    
    <item>
      <title>The Logic Module</title>
      <link>https://kaivalyar.github.io/gsoc18-pracmln/posts/the-logic-module/</link>
      <pubDate>Fri, 29 Jun 2018 13:54:15 +0530</pubDate>
      
      <guid>https://kaivalyar.github.io/gsoc18-pracmln/posts/the-logic-module/</guid>
      <description>As mentioned in the last post, to convert EnumerationAsk to an extension type required the conversion of all its dependencies first. These included the logic module.
The complication The &amp;lt;LOGIC&amp;gt; in the following figure refers not to a single file, but the entire logic subdirectory. The important files here are common.pyx which contains the Logic superclass and fol.py and fuzzy.py which contain the derived FirstOrderLogic and FuzzyLogic subclasses respectively.</description>
    </item>
    
    <item>
      <title>EnumerationAsk</title>
      <link>https://kaivalyar.github.io/gsoc18-pracmln/posts/enumerationask/</link>
      <pubDate>Sun, 17 Jun 2018 19:14:00 +0530</pubDate>
      
      <guid>https://kaivalyar.github.io/gsoc18-pracmln/posts/enumerationask/</guid>
      <description>EnumerationAsk performs exact inference over a Markov Logic Network. While it is not a very commonly used technique in the real world, where quicker approximations often suffice, it is nonetheless an important algorithm. Additionally, there is also a lot of potential for speeding it up, since the algorithm involves an enumeration of all possible worlds - each variable is assigned each possible value, and the probability of the resulting world is evaluated.</description>
    </item>
    
    <item>
      <title>MLN Inference</title>
      <link>https://kaivalyar.github.io/gsoc18-pracmln/posts/mln-inference/</link>
      <pubDate>Fri, 08 Jun 2018 00:52:55 +0530</pubDate>
      
      <guid>https://kaivalyar.github.io/gsoc18-pracmln/posts/mln-inference/</guid>
      <description>The inference module of PracMLN allows the user to well, perform inference using PracMLN. As per my GSoC proposal, this was the first portion of PracMLN I intended to speedup. Until few weeks ago, however, my only usage of PracMLN was limited to the GUI mlnlearn and mlnquery tools. To speedup the inference module via Cython, I had to first be able to use it. Thankfully, the documentation contains a handy reference.</description>
    </item>
    
    <item>
      <title>PracMLN and Markov Logic Networks</title>
      <link>https://kaivalyar.github.io/gsoc18-pracmln/posts/pracmln-and-markov-logic-networks/</link>
      <pubDate>Sat, 26 May 2018 15:25:41 +0530</pubDate>
      
      <guid>https://kaivalyar.github.io/gsoc18-pracmln/posts/pracmln-and-markov-logic-networks/</guid>
      <description>Markov Logic Networks are a powerful generalisation of Probabilistic and Logic Based Models. I first learnt about these just a few months back, when I learnt about PracMLN via GSoC. As far as I understand, a Markov Logic Network - MLN for short, consists of various statements in First-Order Logic, like any logical model does. What makes it special, however, and immensely more powerful, is that each statement in this model is assigned a weight.</description>
    </item>
    
    <item>
      <title>Welcome</title>
      <link>https://kaivalyar.github.io/gsoc18-pracmln/posts/welcome/</link>
      <pubDate>Fri, 25 May 2018 01:40:26 +0530</pubDate>
      
      <guid>https://kaivalyar.github.io/gsoc18-pracmln/posts/welcome/</guid>
      <description>Hello! I am Kaivalya Rawal, an undergraduate student of computer science, and an AI enthusiast. For the next few months I will be working on the PracMLN project, from the Insitute of Artificial Intelligence, at the University of Bremen. This will be done as part of the Google Summer of Code Programme, under the mentorship of Daniel Nyga the creator and maintainer of PracMLN.
The project abstract can be found here on the official GSoC website, and here is a link to my proposal.</description>
    </item>
    
  </channel>
</rss>