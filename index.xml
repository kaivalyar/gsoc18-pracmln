<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Markov Logic Networks in Python: PracMLN</title>
    <link>https://kaivalyar.github.io/gsoc18-pracmln/</link>
    <description>Recent content on Markov Logic Networks in Python: PracMLN</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 17 Jun 2018 19:14:00 +0530</lastBuildDate>
    
	<atom:link href="https://kaivalyar.github.io/gsoc18-pracmln/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>EnumerationAsk</title>
      <link>https://kaivalyar.github.io/gsoc18-pracmln/posts/enumerationask/</link>
      <pubDate>Sun, 17 Jun 2018 19:14:00 +0530</pubDate>
      
      <guid>https://kaivalyar.github.io/gsoc18-pracmln/posts/enumerationask/</guid>
      <description>For a little over a week now, I have been trying to convert the Enumeration-Ask algorithm from exact.py to a Cython extension type.
Extension Types Extension types are classes that have been compiled via Cython (so cdef classes, essentially). They allow typing information to be added to attributes, and speed up attribute access times (by replacing a Python dictionary lookup with a C struct access). The official documentation for extension types is long and detailed, but, as I found out, not quite exhaustive.</description>
    </item>
    
    <item>
      <title>MLN Inference</title>
      <link>https://kaivalyar.github.io/gsoc18-pracmln/posts/mln-inference/</link>
      <pubDate>Fri, 08 Jun 2018 00:52:55 +0530</pubDate>
      
      <guid>https://kaivalyar.github.io/gsoc18-pracmln/posts/mln-inference/</guid>
      <description>The inference module of PracMLN allows the user to well, perform inference using PracMLN. As per my GSoC proposal, this was the first portion of PracMLN I intended to speedup. Until few weeks ago, however, my only usage of PracMLN was limited to the GUI mlnlearn and mlnquery tools. To speedup the inference module via Cython, I had to first be able to use it. Thankfully, the documentation contains a handy reference.</description>
    </item>
    
    <item>
      <title>PracMLN and Markov Logic Networks</title>
      <link>https://kaivalyar.github.io/gsoc18-pracmln/posts/pracmln-and-markov-logic-networks/</link>
      <pubDate>Sat, 26 May 2018 15:25:41 +0530</pubDate>
      
      <guid>https://kaivalyar.github.io/gsoc18-pracmln/posts/pracmln-and-markov-logic-networks/</guid>
      <description>Markov Logic Networks are a powerful generalisation of Probabilistic and Logic Based Models. I first learnt about these just a few months back, when I learnt about PracMLN via GSoC. As far as I understand, a Markov Logic Network - MLN for short, consists of various statements in First-Order Logic, like any logical model does. What makes it special, however, and immensely more powerful, is that each statement in this model is assigned a weight.</description>
    </item>
    
    <item>
      <title>Welcome</title>
      <link>https://kaivalyar.github.io/gsoc18-pracmln/posts/welcome/</link>
      <pubDate>Fri, 25 May 2018 01:40:26 +0530</pubDate>
      
      <guid>https://kaivalyar.github.io/gsoc18-pracmln/posts/welcome/</guid>
      <description>Hello! I am Kaivalya Rawal, an undergraduate student of computer science, and an AI enthusiast. I will be working on the PracMLN project over the next few months, under the mentorship of Daniel Nyga, as part of the Google Summer of Code Programme.
The project abstract can be found here on the official GSoC website, and here is a link to my proposal. It remains to be seen however, how the goals of the project change over the summer, and what new challenges appear along the way.</description>
    </item>
    
  </channel>
</rss>